import rclpy
from turtlebot4_navigation.turtlebot4_navigator import TurtleBot4Directions, TurtleBot4Navigator
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy, QoSDurabilityPolicy
from geometry_msgs.msg import PoseStamped, Twist, PoseWithCovarianceStamped
from rclpy.node import Node
from nav_msgs.msg import Odometry
from scipy.signal import place_poles
from scipy.integrate import solve_ivp
from Pyfhel import Pyfhel, PyCtxt
import matplotlib.pyplot as plt
import csv
import numpy as np
import time
import math

# Controller parameters
initial_conditions = [2, 5, 9, 1]  # [x0, y0, theta0, v]
A = np.array([[0, 1, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 1],
              [0, 0, 0, 0]])

B = np.array([[0, 0],
              [1, 0],
              [0, 0],
              [0, 1]])

p = [-0.4, -0.5, -0.5, -0.4]  # Desired poles
K = place_poles(A, B, p).gain_matrix

K1 = np.array(K[:1, :]).flatten()  # Flatten to make it 1-dimensional
K2 = np.array(K[1:, :]).flatten()

# Encryption scheme 
HE = Pyfhel()           # Creating empty Pyfhel object
ckks_params = {
    'scheme': 'CKKS',   # can also be 'ckks'
    'n': 2**14,         # Polynomial modulus degree. For CKKS, n/2 values can be
                        #  encoded in a single ciphertext.
                        #  Typ. 2^D for D in [10, 15]
    'scale': 2**30,     # All the encodings will use it for float->fixed point
                        #  conversion: x_fix = round(x_float * scale)
                        #  You can use this as default scale or use a different
                        #  scale on each operation (set in HE.encryptFrac)
    'qi_sizes': [60, 30, 30, 30, 30, 60] # Number of bits of each prime in the chain.
                        # Intermediate values should be  close to log2(scale)
                        # for each operation, to have small rounding errors.
}

HE.contextGen(**ckks_params)  # Generate context for ckks scheme
HE.keyGen()                   # Key Generation: generates a pair of public/secret keys
HE.relinKeyGen()
HE.rotateKeyGen()

K1_cyph = HE.encryptFrac(K1)
K2_cyph = HE.encryptFrac(K2)

def u_ref(t):
    v_ref = 0.20
    w_ref = 0.25
    x_double = - v_ref * w_ref * np.sin(w_ref * t + np.pi/2)
    y_double = v_ref * w_ref * np.cos(w_ref * t + np.pi/2)
    return np.array([x_double, y_double])
    
def z_ref(t):
    v_ref = 0.20
    w_ref = 0.25
    x = (v_ref/w_ref) * np.sin(w_ref * t + np.pi/2) - 1.5 
    dxdt = v_ref * np.cos(w_ref * t + np.pi/2)
    y = - (v_ref/w_ref) * np.cos(w_ref * t + np.pi/2)
    dydt = v_ref * np.sin(w_ref * t + np.pi/2)
    theta = np.mod(w_ref * (t - 7), 2 * np.pi) - np.pi # Adding theta_ref calculation
    theta_ref = w_ref * t + np.pi/2  # Adding theta_ref_csv calculation
    return np.array([x, dxdt, y, dydt, theta, theta_ref, v_ref, w_ref])
    
def ctrlFlatnessEnc(t, z_e, zr_e, ur1_e, ur2_e, cosT_e, sinT_e, inv_v_e): 
    ## Compute the trajectory error using homomorphic operation
    deltaT_cyph = z_e - zr_e

    ## Compute the feedback controls for the flat model using homomorphic operation
    #  -K @ deltaT + ur
    mK_deltaT_m_ur1_cyph_1 = -(K1_cyph @ deltaT_cyph) + ur1_e
    mK_deltaT_m_ur2_cyph_2 = -(K2_cyph @ deltaT_cyph) + ur2_e

    ## Retrieve the controls for the nonlinear model 
    # (vdot, omega) = M^{-1} (u1,u2)
    vdot_e  =   cosT_e * mK_deltaT_m_ur1_cyph_1 + sinT_e * mK_deltaT_m_ur2_cyph_2
    omega_e = (-sinT_e * mK_deltaT_m_ur1_cyph_1 + cosT_e * mK_deltaT_m_ur2_cyph_2) * inv_v_e

    return vdot_e, omega_e
    
class MoveTurtleBot(Node):
    def __init__(self):
        super().__init__('move_turtlebot')
        self.publisher_ = self.create_publisher(Twist, '/cmd_vel', 10)
        
        self.start_time = time.time()
        self.duration = 150
        
        # Initialize arrays
        self.t_array = []
        self.x_array = []
        self.y_array = []
        self.theta_array = []
        self.v_array = []
        self.w_array = []
        
        self.x_hat_array = []
        self.x_dot_hat_array = []
        self.y_hat_array = []
        self.y_dot_hat_array = []
        self.theta_hat_array = []
        
        self.t_array_s = []
        self.x_array_s = []
        self.y_array_s = []
        self.theta_array_s = []
        self.v_array_s = []
        self.w_array_s = []
        
        self.x_hat_array_s = []
        self.x_dot_hat_array_s = []
        self.y_hat_array_s = []
        self.y_dot_hat_array_s = []
        self.theta_hat_array_s = []
        
        self.x_ref_array = []  # Add x_ref array
        self.x_dot_ref_array = [] 
        self.y_ref_array = []  # Add y_ref array
        self.y_dot_ref_array = [] 
        self.theta_ref_array = []  # Add theta_ref array
        self.theta_ref_csv_array = []
        self.v_ref_array = []  # Add v_ref array
        self.w_ref_array = []  # Add w_ref array
        
        self.x_ref_array_s = []  # Add x_ref array
        self.x_dot_ref_array_s = [] 
        self.y_ref_array_s = []  # Add y_ref array
        self.y_dot_ref_array_s = [] 
        self.theta_ref_array_s = []  # Add theta_ref array
        self.theta_ref_csv_array_s = []
        self.v_ref_array_s = []  # Add v_ref array
        self.w_ref_array_s = []  # Add w_ref array
        
        self.robot_x = 0.0
        self.robot_y = 0.0
        self.robot_theta = 0.0
        
        self.robot_x_s = 0.0
        self.robot_y_s = 0.0
        self.robot_theta_s = 0.0
        self.old_v_s = 0.31
       
        self.old_v = 0.31
        
        self.start_plotting = False
        
        self.QOS_amcl = QoSProfile(reliability=QoSReliabilityPolicy.RELIABLE,
                                   history=QoSHistoryPolicy.KEEP_LAST,
                                   depth=1)
       
        amcl_pose_sub = self.create_subscription(PoseWithCovarianceStamped, 'amcl_pose', self.amcl_callback, self.QOS_amcl)
        
        
        # Enable interactive mode for plotting
        plt.ion()
        self.fig, ((self.ax1, self.ax2, self.ax3), 
                   (self.ax4, self.ax5, self.ax6),
                   (self.ax7, self.ax8, self.ax9)) = plt.subplots(3, 3, figsize=(15, 15))
        
    def euler_from_quaternion(self, q):
        x, y, z, w = q.x, q.y, q.z, q.w
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        roll_x = np.arctan2(t0, t1)
        t2 = +2.0 * (w * y - z * x)
        t2 = +1.0 if t2 > +1.0 else t2
        t2 = -1.0 if t2 < -1.0 else t2
        pitch_y = np.arcsin(t2)
      
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        yaw_z = np.arctan2(t3, t4)
        return roll_x, pitch_y, yaw_z
        
    def publish_twist(self, linear_velocity, angular_velocity):
        msg = Twist()
        msg.linear.x = linear_velocity
        msg.angular.z = angular_velocity
        self.publisher_.publish(msg)
        self.get_logger().info(f'Moving With - linear velocity: {msg.linear.x}, angular velocity: {msg.angular.z}')
        
    def simulation(self, duration_s):
        T = 1.0
        current_time = 0
        
        while current_time < duration_s:
            
            # Compute control inputs
            u_r = u_ref(current_time)
            ur1_array = np.array([u_r[0]], dtype=float)
            ur2_array = np.array([u_r[1]], dtype=float)

            z_bru_r = z_ref(current_time)
            z_bru_r_cyph = HE.encryptFrac(z_bru_r[:-4])  # Exclude theta, theta_ref, v_ref, and w_ref for encryptionn 

            x = self.robot_x_s
            y = self.robot_y_s
            theta = self.robot_theta_s
            v = self.old_v_s
            
            z_bru2 = np.array([x, v * np.cos(theta), y, v * np.sin(theta)])
            z_bru_cyph = HE.encryptFrac(z_bru2)

            ur1_cyph = HE.encryptFrac(ur1_array) 
            ur2_cyph = HE.encryptFrac(ur2_array) 
            cosT_cyph = HE.encryptFrac(np.array([np.cos(theta)], dtype=float)) 
            sinT_cyph = HE.encryptFrac(np.array([np.sin(theta)], dtype=float))
            inv_v_cyph = HE.encryptFrac(np.array([1 / v], dtype=float))

            vdot_cyph, omega_cyph = ctrlFlatnessEnc(current_time, z_bru_cyph, z_bru_r_cyph, ur1_cyph, ur2_cyph, cosT_cyph, sinT_cyph, inv_v_cyph)

            dv = HE.decryptFrac(vdot_cyph)[0]
            w = HE.decryptFrac(omega_cyph)[0]
            
            # Update state
            v_new = v + dv * T
            theta_new = theta + w * T
            x_new = x + v * np.cos(theta) * T
            y_new = y + v * np.sin(theta) * T
            
            max_linear_velocity = 0.31
            if v_new > max_linear_velocity or v_new < 0:
                self.get_logger().warn(f'Warning: Limiting to {max_linear_velocity}.')
            v_new = max(0, min(v_new, max_linear_velocity))

            max_angular_velocity = 1.9
            if abs(w) > max_angular_velocity:
                self.get_logger().warn(f'High angular velocity detected: {w}. Limiting to {np.sign(w) * max_angular_velocity}')
                omega = np.sign(w) * max_angular_velocity
            
            self.old_v = v_new
            self.robot_x_s = x_new
            self.robot_y_s = y_new
            self.robot_theta_s = theta_new
            

            self.get_logger().info(f'Simulation loop: -Time: {current_time:.2f} s - x: {self.robot_x_s}, y: {self.robot_y_s}, theta: {self.robot_theta_s}, v: {v_new}, w: {w}')
            
            # Append data to arrays
            self.t_array_s.append(current_time)
            self.x_array_s.append(x_new)
            self.y_array_s.append(y_new)
            self.theta_array_s.append(theta_new)
            self.v_array_s.append(v_new)
            self.w_array_s.append(w)
            
            self.x_ref_array_s.append(z_bru_r[0])  # Store x_ref
            self.x_dot_ref_array_s.append(z_bru_r[1])  # Store x_dot_ref
            self.y_ref_array_s.append(z_bru_r[2])  # Store y_ref
            self.y_dot_ref_array_s.append(z_bru_r[3])  # Store y_dot_ref
            self.theta_ref_array_s.append(z_bru_r[4])  # Store theta_ref
            self.theta_ref_csv_array_s.append(z_bru_r[5])  # Store theta_ref_csv
            self.v_ref_array_s.append(z_bru_r[6])  # Store v_ref
            self.w_ref_array_s.append(z_bru_r[7])  # Store w_ref

            current_time = current_time + T  # Update current time
            
    def amcl_callback(self, msg):
        self.robot_x = msg.pose.pose.position.x
        self.robot_y = msg.pose.pose.position.y
        # Extract orientation information from the quaternion and convert it to Euler angles
        orientation = msg.pose.pose.orientation
        _, _, self.robot_theta = self.euler_from_quaternion(orientation)
        self.get_logger().info(f'AMCL data - x: {self.robot_x}, y: {self.robot_y}, theta: {self.robot_theta}')
        
        # Initial state
        x = self.robot_x
        y = self.robot_y
        theta = self.robot_theta
        v = self.old_v
        
        T = 0.05
        current_time = time.time() - self.start_time
        
        # Compute control inputs
        u_r = u_ref(current_time)
        ur1_array = np.array([u_r[0]], dtype=float)
        ur2_array = np.array([u_r[1]], dtype=float)

        z_bru_r = z_ref(current_time)
        z_bru_r_cyph = HE.encryptFrac(z_bru_r[:-4])  # Exclude theta, theta_ref, v_ref, and w_ref for encryptionn 

        z_bru2 = np.array([x, v * np.cos(theta), y, v * np.sin(theta)])
        z_bru_cyph = HE.encryptFrac(z_bru2)

        ur1_cyph = HE.encryptFrac(ur1_array) 
        ur2_cyph = HE.encryptFrac(ur2_array) 
        cosT_cyph = HE.encryptFrac(np.array([np.cos(theta)], dtype=float)) 
        sinT_cyph = HE.encryptFrac(np.array([np.sin(theta)], dtype=float))
        inv_v_cyph = HE.encryptFrac(np.array([1 / v], dtype=float))

        vdot_cyph, omega_cyph = ctrlFlatnessEnc(current_time, z_bru_cyph, z_bru_r_cyph, ur1_cyph, ur2_cyph, cosT_cyph, sinT_cyph, inv_v_cyph)

        vdot = HE.decryptFrac(vdot_cyph)[0]
        omega = HE.decryptFrac(omega_cyph)[0]
        
        # Update state
        v_new = v + vdot * T
        theta_new = theta + omega * T
        x_new = x + v * np.cos(theta) * T
        y_new = y + v * np.sin(theta) * T
        
        max_linear_velocity = 0.31
        if v_new > max_linear_velocity or v_new < 0:
            self.get_logger().warn(f'Warning: Limiting to {max_linear_velocity}.')
        v_new = max(0, min(v_new, max_linear_velocity))

        max_angular_velocity = 1.9
        if abs(omega) > max_angular_velocity:
            self.get_logger().warn(f'High angular velocity detected: {omega}. Limiting to {np.sign(omega) * max_angular_velocity}')
            omega = np.sign(omega) * max_angular_velocity
        
        self.old_v = v_new
        
        Q = [x_new, y_new, theta_new, v_new]  # Updated state vector

        self.get_logger().info(f'Control loop: -Time: {current_time:.2f} s - x: {x_new}, y: {y_new}, theta: {theta_new}, v: {v_new}, w: {omega}, Q: {Q}')
        
        if current_time > self.duration:
            self.get_logger().info('Control loop control finished.')
            raise SystemExit 
        
        # Append data to arrays
        self.t_array.append(current_time)
        self.x_array.append(x_new)
        self.y_array.append(y_new)
        self.theta_array.append(theta_new)
        self.v_array.append(v_new)
        self.w_array.append(omega)
        self.x_ref_array.append(z_bru_r[0])  # Store x_ref
        self.x_dot_ref_array.append(z_bru_r[1])  # Store x_dot_ref
        self.y_ref_array.append(z_bru_r[2])  # Store y_ref
        self.y_dot_ref_array.append(z_bru_r[3])  # Store x_dot_ref
        self.theta_ref_array.append(z_bru_r[4])  # Store theta_ref
        self.theta_ref_csv_array.append(z_bru_r[5])  # Store theta_ref_csv
        self.v_ref_array.append(z_bru_r[6])  # Store v_ref
        self.w_ref_array.append(z_bru_r[7])  # Store w_ref
        
        self.publish_twist(v_new, omega)

    def save_to_csv(self, filename):
        headers = ['Time', 'X', 'Y', 'Theta', 'Linear Velocity', 'Angular Velocity', 'X_ref', 'Y_ref', 'Theta_ref', 'V_ref', 'W_ref', 'X_dot_ref', 'Y_dot_ref']
        rows = zip(self.t_array, self.x_array, self.y_array, self.theta_array, self.v_array, self.w_array, self.x_ref_array, self.y_ref_array, self.theta_ref_csv_array, self.v_ref_array, self.w_ref_array, self.x_dot_ref_array, self.y_dot_ref_array)
        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            file.write('T = 0.05\n')
            file.write('duration = 150\n')
            file.write('duration_s = 60\n')
            file.write('p = [-0.4, -0.5, -0.5, -0.4]\n')
            writer.writerow(headers)
            writer.writerows(rows)
        
        self.get_logger().info(f'Data saved to {filename}')
        
    def save_to_csv_s(self, filename):
        headers = ['Time', 'X', 'Y', 'Theta', 'Linear Velocity', 'Angular Velocity', 'X_ref', 'Y_ref', 'Theta_ref', 'V_ref', 'W_ref', 'X_dot_ref', 'Y_dot_ref']
        rows = zip(self.t_array_s, self.x_array_s, self.y_array_s, self.theta_array_s, self.v_array_s, self.w_array_s, self.x_ref_array_s, self.y_ref_array_s, self.theta_ref_csv_array_s, self.v_ref_array_s, self.w_ref_array_s, self.x_dot_ref_array_s, self.y_dot_ref_array_s)
        
        ckks_params = {
        'n': 2**14,                 # Polynomial modulus degree
        'scale': 2**30,             # Scale for float->fixed point conversion
        'qi_sizes': [60, 30, 30, 30, 30, 60]  # Number of bits of each prime in the chain
        }
        
        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            file.write('T = 0.05\n')
            file.write('duration = 150\n')
            file.write('duration_s = 60\n')
            file.write('p = [-0.4, -0.5, -0.5, -0.4]\n')
            
            # Write CKKS parameters
            file.write(f'n = {ckks_params["n"]} of base 2\n')
            file.write(f'scale = {ckks_params["scale"]} of base 2\n')
            file.write(f'qi_sizes = {ckks_params["qi_sizes"]}\n')
            
            writer.writerow(headers)
            writer.writerows(rows)
        
        self.get_logger().info(f'Data saved to {filename}')
            
    def plot_all(self):
    
        plt.subplots_adjust(wspace=0.5, hspace=0.5, top=0.95, bottom=0.05, left=0.1, right=0.9)
        
        self.ax1.clear()
        self.ax1.plot(self.t_array, self.x_array, 'r--', label='X')
        self.ax1.plot(self.t_array, self.x_ref_array, 'r-', label='X_ref')
        self.ax1.set_xlabel('Time')
        self.ax1.set_ylabel('X position')
        self.ax1.set_title('X vs Time')
        self.ax1.legend()

        self.ax2.clear()
        self.ax2.plot(self.t_array, self.y_array, 'g--', label='Y')
        self.ax2.plot(self.t_array, self.y_ref_array, 'g-', label='Y_ref')
        self.ax2.set_xlabel('Time')
        self.ax2.set_ylabel('Y position')
        self.ax2.set_title('Y vs Time')
        self.ax2.legend()

        self.ax3.clear()
        self.ax3.plot(self.t_array, self.theta_array, 'b--', label='Theta')
        self.ax3.plot(self.t_array, self.theta_ref_array, 'b-', label='Theta_ref')
        self.ax3.set_xlabel('Time')
        self.ax3.set_ylabel('Theta position')
        self.ax3.set_title('Theta vs Time')
        self.ax3.legend()

        self.ax4.clear()
        self.ax4.plot(self.x_array, self.y_array, 'y--', label='Trajectory')
        self.ax4.plot(self.x_ref_array, self.y_ref_array, 'r-', label='Reference Trajectory')
        self.ax4.set_xlabel('X position')
        self.ax4.set_ylabel('Y position')
        self.ax4.set_title('X vs Y')
        self.ax4.legend()
        
        self.ax5.clear()
        self.ax5.plot(self.t_array, self.v_array, 'm--', label='Linear Velocity')
        self.ax5.plot(self.t_array, self.v_ref_array, 'm-', label='Reference Linear Velocity')
        self.ax5.set_xlabel('Time')
        self.ax5.set_ylabel('Linear Velocity')
        self.ax5.set_title('Linear Velocity vs Time')
        self.ax5.legend()
        
        self.ax6.clear()
        self.ax6.plot(self.t_array, self.w_array, 'k--', label='Angular Velocity')
        self.ax6.plot(self.t_array, self.w_ref_array, 'k-', label='Reference Angular Velocity')
        self.ax6.set_xlabel('Time')
        self.ax6.set_ylabel('Angular Velocity')
        self.ax6.set_title('Angular Velocity vs Time')
        self.ax6.legend()
        
        # Additional subplots for error plots
        self.ax7.clear()
        self.ax7.plot(self.t_array, np.abs(np.array(self.x_array) - np.array(self.x_ref_array)), 'r--', label='X Error')
        self.ax7.set_xlabel('Time')
        self.ax7.set_ylabel('X Error')
        self.ax7.set_title('X Error vs Time')
        self.ax7.legend()

        self.ax8.clear()
        self.ax8.plot(self.t_array, np.abs(np.array(self.y_array) - np.array(self.y_ref_array)), 'g--', label='Y Error')
        self.ax8.set_xlabel('Time')
        self.ax8.set_ylabel('Y Error')
        self.ax8.set_title('Y Error vs Time')
        self.ax8.legend()
        
        self.ax9.clear()
        self.ax9.plot(self.t_array, np.abs(np.array(self.theta_array) - np.array(self.theta_ref_array)), 'b--', label='Theta Error')
        self.ax9.set_xlabel('Time')
        self.ax9.set_ylabel('Theta Error')
        self.ax9.set_title('Theta Error vs Time')
        self.ax9.legend()
        
        start_time = 37
        end_time = 55

        # Adjust the x-axis limits to show only the specified time interval
        for ax in [self.ax7, self.ax8, self.ax9]:
            ax.set_xlim(start_time, end_time)
            
        self.fig.canvas.draw()
        self.fig.canvas.flush_events()
        
        # Save the figure
        plt.savefig('/home/turtlebotter/turtlebot4_ws/src/turtlebot4_python_tutorials/Figures/Enc_Circle.png')


def main():
    rclpy.init()

    navigator = TurtleBot4Navigator()
    
    # Start on dock
    if not navigator.getDockedStatus():
        navigator.info('Docking before initializing pose')
        navigator.dock()
    
    # Set initial pose
    initial_pose = navigator.getPoseStamped([0.0, 0.0], TurtleBot4Directions.NORTH)
    navigator.setInitialPose(initial_pose)
    
    # Wait for Nav2 to be active
    navigator.waitUntilNav2Active()

    # Undock
    navigator.undock()
    
    # Create a node for moving the robot
    node = MoveTurtleBot()
    
    try:
        rclpy.spin(node)  # Ensure the node is properly initialized
        
    except SystemExit: 
        rclpy.logging.get_logger("Quitting").info('Done')
        node.plot_all()
        node.simulation(60)
        node.save_to_csv('/home/turtlebotter/turtlebot4_ws/src/turtlebot4_python_tutorials/Data/Enc_Circle_robot_data.csv')
        node.save_to_csv_s('/home/turtlebotter/turtlebot4_ws/src/turtlebot4_python_tutorials/Data/Enc_Circle_robot_data_s.csv')
        
    finally: 
        navigator.dock()
        
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

