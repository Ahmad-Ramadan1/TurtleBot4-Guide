import os
import time
import numpy as np
import control as ct
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from Pyfhel import Pyfhel

## System reference trajectory 
# Circle
Ur   = lambda t : np.array([np.ones_like(t), np.ones_like(t)])
Tr   = lambda t : np.array([np.sin(t), -np.cos(t), t])
dTr  = lambda t : np.array([np.cos(t), np.sin(t), 1])
ddTr = lambda t : np.array([-np.sin(t), np.cos(t), 0])

# Straight Line
# Ur   = lambda t : np.array([np.ones_like(t), np.zeros_like(t)])
# Tr   = lambda t : np.array([t, np.zeros_like(t), np.zeros_like(t)])
# dTr  = lambda t : np.array([np.ones_like(t), np.zeros_like(t), np.zeros_like(t)])
# ddTr = lambda t : np.array([np.zeros_like(t), np.zeros_like(t), np.zeros_like(t)])

# Spiral
# Ur   = lambda t : np.array([t, np.ones_like(t)])
# Tr   = lambda t : np.array([t*np.sin(t)+np.cos(t) , np.sin(t) - t*np.cos(t), t])
# dTr  = lambda t : np.array([t*np.cos(t), t*np.sin(t), np.ones_like(t)])
# ddTr = lambda t : np.array([np.cos(t)-t*np.sin(t) , np.sin(t)+t*np.cos(t), np.zeros_like(t)])

# Encryption scheme 
HE = Pyfhel()           # Creating empty Pyfhel object
ckks_params = {
    'scheme': 'CKKS',   # can also be 'ckks'
    'n': 2**14,         # Polynomial modulus degree. For CKKS, n/2 values can be
                        #  encoded in a single ciphertext.
                        #  Typ. 2^D for D in [10, 15]
    'scale': 2**35,     # All the encodings will use it for float->fixed point
                        #  conversion: x_fix = round(x_float * scale)
                        #  You can use this as default scale or use a different
                        #  scale on each operation (set in HE.encryptFrac)
    'qi_sizes': [60, 35, 35, 35, 35, 60] # Number of bits of each prime in the chain.
                        # Intermediate values should be  close to log2(scale)
                        # for each operation, to have small rounding errors.
}
HE.contextGen(**ckks_params)  # Generate context for ckks scheme
HE.keyGen()                   # Key Generation: generates a pair of public/secret keys
HE.relinKeyGen()
HE.rotateKeyGen()

# System definition 
A0 = np.matrix([[0, 1], [0, 0]])
B0 = np.matrix([[0] , [1]])
C0 = np.matrix([[1, 0]])

K0 = ct.place(A0, B0, [-1, -3])
L0 = ct.place(A0.transpose(), C0.transpose(), [-4, -6]).transpose()

K1 = np.block([K0, np.zeros((1,2))]).reshape((4,))
K2 = np.block([np.zeros((1,2)), K0]).reshape((4,))

A = np.block([[A0, np.zeros_like(A0)], [np.zeros_like(A0), A0]])
B = np.block([[B0, np.zeros_like(B0)], [np.zeros_like(B0), B0]])
L = np.block([[L0, np.zeros_like(L0)], [np.zeros_like(L0), L0]])
C = np.block([[C0, np.zeros_like(C0)], [np.zeros_like(C0), C0]])

# Encrypted data
K1_cyph = HE.encrypt(K1)
K2_cyph = HE.encrypt(K2)

# Functions
""" 
Compute control for the nonlinear robot using the flat model 
input zh_e  : encrypted observed position of the flat model  z = (x, \dot x, y, \dot y)
input zr_e : encrypted reference trajectory in the flat model coordinates  zr = (xr, \dot xr, yr, \dot yr)
input ur1_e, ur2_e : encrypted reference controls for the flat trajectory (u1,u2) = (\ddot xr, \ddot yr)
input cosT_e, sinT_e : encrypted values of cos(theta) and sin(theta) ; computed using estimated theta
input inv_v_e : encrypted inverse of velocity of the mobile robot
return [vdot ; omega ; u1 ; u2], where u1 and u2 are the feedback controls of the flat model
"""
def ctrlFlatnessLUENEnc(t, zh_e, zr_e, ur1_e, ur2_e, cosT_e, sinT_e, inv_v_e): 
    ## Compute the trajectory error using homomorphic operation
    #  delta z = z_e - zr_e
    deltaT_cyph = zh_e - zr_e

    ## Compute the feedback controls for the flat model using homomorphic operation
    #  -K @ deltaT + ur
    mK_deltaT_m_ur1_cyph_1 = -(K1_cyph @ deltaT_cyph) + ur1_e
    mK_deltaT_m_ur2_cyph_2 = -(K2_cyph @ deltaT_cyph) + ur2_e

    ## Retrieve the controls for the nonlinear model 
    # (vdot, omega) = M^{-1} (u1,u2)
    vdot_e  =   cosT_e * mK_deltaT_m_ur1_cyph_1 + sinT_e * mK_deltaT_m_ur2_cyph_2
    omega_e = (-sinT_e * mK_deltaT_m_ur1_cyph_1 + cosT_e * mK_deltaT_m_ur2_cyph_2) * inv_v_e

    return vdot_e, omega_e, mK_deltaT_m_ur1_cyph_1, mK_deltaT_m_ur2_cyph_2

def ctrlFlatnessClear(t, z, zr, ur1, ur2, cosT, sinT, v): 
    ## Compute the trajectory error
    #  delta z = z - zr
    deltaT = z - zr

    ## Compute the feedback controls for the flat model
    #  -K @ deltaT + ur
    u_bf_1 = -K1 @ deltaT + ur1
    u_bf_2 = -K2 @ deltaT + ur2

    ## Retrieve the controls for the nonlinear model 
    # (vdot, omega) = M^{-1} (u1,u2)
    vdot  =   cosT * u_bf_1 + sinT * u_bf_2
    omega = (-sinT * u_bf_1 + cosT * u_bf_2) / v

    return vdot, omega

l1_cyph = HE.encrypt(L0[0])
l2_cyph = HE.encrypt(L0[1])

def update_observer(z_1_cyph, z_3_cyph, u1_cyph, u2_cyph, zh_1_cyph, zh_2_cyph, zh_3_cyph, zh_4_cyph):
    ## Update the observer 
    # A * zh_{k} + B*u + l*C*(z - zh)
    new_zh_1_cyph = zh_2_cyph + l1_cyph * (z_1_cyph - zh_1_cyph)
    new_zh_2_cyph = u1_cyph   + l2_cyph * (z_1_cyph - zh_1_cyph)

    new_zh_3_cyph = zh_4_cyph + l1_cyph * (z_3_cyph - zh_3_cyph)
    new_zh_4_cyph = u2_cyph   + l2_cyph * (z_3_cyph - zh_3_cyph)

    return new_zh_1_cyph, new_zh_2_cyph, new_zh_3_cyph, new_zh_4_cyph

""" 
z'(t) = f(t, z) with 
    z(t)    = (x(t), y(t), theta(t), v(t))
    f(t, z) = (v(t) * cos(theta(t)), v(t)*sin(theta(t)), omega, vdot(t))
omega and vdot are computed inside the ctrlFlatness function 
"""
def dynamics_CLEAR_AND_OBS_ENC(t, z): 
    tref   = Tr(t)
    dtref  = dTr(t)
    ddtref = ddTr(t)

    z_bru_r = np.array([tref[0], dtref[0], tref[1], dtref[1]])
    ur1     = ddtref[0]
    ur2     = ddtref[1]

    # Split data 
    z1 = z[0:4]  # x, y, theta, v
    z2 = z[4:8]  # x, y, theta, v of the encrypted trajectory
    zh = z[8:12] # Brunovski state of the observer

    ## Compute the trajectory in clear ! 
    x1, y1, theta1, v1 = z1
    z_bru1 = np.array([x1, v1*np.cos(theta1), y1, v1*np.sin(theta1)])
    cosT1  = np.cos(theta1)
    sinT1  = np.sin(theta1)

        # Compute the value of the controls
    ctrl1         = ctrlFlatnessClear(t, z_bru1, z_bru_r, ur1, ur2, cosT1, sinT1, v1)
    vdot1, omega1 = ctrl1

        # Compute dynamics
    ftz1  = np.array([v1 * np.cos(theta1) , v1 * np.sin(theta1) , omega1, vdot1])

    ## Compute the trajectory encrypted
    x2, y2, theta2, v2 = z2
    z_bru2 = np.array([x2, v2*np.cos(theta2), y2, v2*np.sin(theta2)])

        # Encrypted data
    zh_cyph      = HE.encrypt(zh)
    z_bru_r_cyph = HE.encrypt(z_bru_r)

    ur1_cyph = HE.encrypt(ur1)
    ur2_cyph = HE.encrypt(ur2)

    thetah = np.arctan2(zh[3], zh[1])

    cosT_cyph  = HE.encrypt(np.cos(thetah))
    sinT_cyph  = HE.encrypt(np.sin(thetah))
    inv_v_cyph = HE.encrypt(1 / v2)

        # Compute control with encrypted data
    ctrl2_cyph = ctrlFlatnessLUENEnc(t, zh_cyph, z_bru_r_cyph, ur1_cyph, ur2_cyph, cosT_cyph, sinT_cyph, inv_v_cyph)

        # Update Observer 
    z1_cyph = HE.encrypt(x2)
    z3_cyph = HE.encrypt(y2)

    zh1_cyph = HE.encrypt(zh[0])
    zh2_cyph = HE.encrypt(zh[1])
    zh3_cyph = HE.encrypt(zh[2])
    zh4_cyph = HE.encrypt(zh[3])

    u1_cyph  = HE.encrypt(HE.decrypt(ctrl2_cyph[2])[0])
    u2_cyph  = HE.encrypt(HE.decrypt(ctrl2_cyph[3])[0])

    new_zh_cyph = update_observer(z1_cyph, z3_cyph, u1_cyph, u2_cyph, zh1_cyph, zh2_cyph, zh3_cyph, zh4_cyph)

    ftzh = np.array([HE.decrypt(new_zh_cyph[0])[0], HE.decrypt(new_zh_cyph[1])[0], HE.decrypt(new_zh_cyph[2])[0], HE.decrypt(new_zh_cyph[3])[0]])

        # Decrypt control 
    vdot2  = HE.decrypt(ctrl2_cyph[0])[0]
    omega2 = HE.decrypt(ctrl2_cyph[1])[0]
    #u1     = HE.decrypt(ctrl2_cyph[2])[0]
    #u2     = HE.decrypt(ctrl2_cyph[3])[0]

    # omega = omega / v
    ftz2 = np.array([v2 * np.cos(theta2) , v2 * np.sin(theta2) , omega2, vdot2])
    #ftzh = np.array(A @ zh + B @ np.array([u1, u2]) + L @ C @ (z_bru2 - zh)).reshape((4,))

    return np.concatenate((ftz1, ftz2, ftzh))

##
# Main 
# Solve \dot (x, y, theta, v) = (v*cos(theta), v*sin(theta), omega, vdot)
# with (omega, vdot) computed by a state feedback on the flat model
##
T  = 5*np.pi # Temps final pour intégrer l'erreur sur la dernière période de la trajectoire de référence
NT = 512
X0 = np.array([0.5, 3.5, np.pi / 6])
# Time 
t  = np.linspace(0, T, NT)
# Extended State 
# Z = (x, y, theta, v, xe, ye, thetae, ve, xh, xph, yh, yph)
Z0 = np.concatenate((X0, [1], X0, [1], [0, 0, 0, 0]))# initial extended state with v[0] = 1

start_time = time.time()
sol = solve_ivp(dynamics_CLEAR_AND_OBS_ENC, [0, T], Z0, t_eval = t)
print("--- %s seconds ---" % (time.time() - start_time))

###
#  Extract data  
### 
tref = Tr(sol.t)
uref = Ur(sol.t)

## Compute omega by differentiating theta
OM = (sol.y[2, 1:] - sol.y[2, :-1]) / (sol.t[1:] - sol.t[:-1])
OM = np.append(OM, OM[-1])

OMe = (sol.y[6, 1:] - sol.y[6, :-1]) / (sol.t[1:] - sol.t[:-1])
OMe = np.append(OMe, OMe[-1])

data = np.transpose([
    sol.t, # t
    # reference trajectory
    tref[0, :], # xr
    tref[1, :], # yr
    tref[2, :], # thetar
    uref[0, :], # vr
    uref[1, :], # omegar
    # Clear trajectory 
    sol.y[0, :], # x
    sol.y[1, :], # y
    sol.y[2, :], # theta
    sol.y[3, :], # v
    OM,          # omega 
    # Encrypted controlled trajectory 
    sol.y[4, :], # xe
    sol.y[5, :], # ye
    sol.y[6, :], # thetae
    sol.y[7, :], # ve
    OMe,          # omegae
    ])

file_name = os.path.basename(__file__).rsplit(".", 1)[0]
head      = "t, xr, yr, thetar, vr, omegar, x, y, theta, v, omega, xe, ye, thetae, ve, omegae"
np.savetxt("data/data_" + file_name + "_" + time.strftime("%Y_%m_%d_%H_%M_%S") + ".txt", data, delimiter=",", header=head, fmt="%.10f", comments='')

## Compute errors on the final trajectory by integrating on the final periode of the reference trajectory
t_err = np.linspace(T-2*np.pi, T, int(np.floor(NT/2)))
tref_err = Tr(t_err)
uref_err = Ur(t_err)

y0_err = np.interp(t_err, sol.t, sol.y[0, :])
y1_err = np.interp(t_err, sol.t, sol.y[1, :])
y2_err = np.interp(t_err, sol.t, sol.y[2, :])
y3_err = np.interp(t_err, sol.t, sol.y[3, :])
OM_err = np.interp(t_err, sol.t, OM)

y4_err = np.interp(t_err, sol.t, sol.y[4, :])
y5_err = np.interp(t_err, sol.t, sol.y[5, :])
y6_err = np.interp(t_err, sol.t, sol.y[6, :])
y7_err = np.interp(t_err, sol.t, sol.y[7, :])
OMe_err = np.interp(t_err, sol.t, OMe)


# Trajectory in XY plane
plt.figure(1)
plt.plot(tref[0, :], tref[1 , :], label = "reference")
plt.plot(sol.y[0, :], sol.y[1, :], label = "real")
plt.plot(sol.y[4, :], sol.y[5, :], label = "encrypted")
plt.legend()
plt.title("Reference, computed, and encrypted trajectories of the mobile robot in the XY-plane")

# Coordinate wise trajectory and controls 
plt.figure(2)
plt.subplot(321)
plt.plot(sol.t, tref[0, :], label = "reference")
plt.plot(sol.t, sol.y[0, :], label = "real")
plt.plot(sol.t, sol.y[4, :], label = "encrypted")
plt.title("x")

plt.subplot(323)
plt.plot(sol.t, tref[1, :], label = "reference")
plt.plot(sol.t, sol.y[1, :], label = "real")
plt.plot(sol.t, sol.y[5, :], label = "encrypted")
plt.title("y")

plt.subplot(325)
plt.plot(sol.t, tref[2, :], label = "reference")
plt.plot(sol.t, sol.y[2, :], label = "real")
plt.plot(sol.t, sol.y[6, :], label = "encrypted")
plt.legend()
plt.title("theta")

plt.subplot(222)
plt.plot(sol.t, uref[0, :], label = "reference")
plt.plot(sol.t, sol.y[3, :], label = "real")
plt.plot(sol.t, sol.y[7, :], label = "encrypted")
plt.legend()
plt.title("v")

plt.subplot(224)
plt.plot(sol.t, uref[1, :], label = "reference")
plt.plot(sol.t, OM, label = "real")
plt.plot(sol.t, OMe, label = "encrypted")
plt.title("omega")

# errors 
plt.figure(3)
plt.suptitle("Error in (x,y,theta,omega)", fontsize=14)

plt.subplot(221)
plt.plot(sol.t, np.abs(tref[0, :] - sol.y[0, :]), label="clear")
plt.plot(sol.t, np.abs(tref[0, :] - sol.y[4, :]), label="encrypted")
plt.legend()
plt.title("x")

plt.subplot(222)
plt.plot(sol.t, np.abs(tref[1, :] - sol.y[1, :]), label="clear")
plt.plot(sol.t, np.abs(tref[1, :] - sol.y[5, :]), label="encrypted")
plt.legend()
plt.title("y")

plt.subplot(223)
plt.plot(sol.t, np.abs(tref[2, :] - sol.y[2, :]), label="clear")
plt.plot(sol.t, np.abs(tref[2, :] - sol.y[6, :]), label="encrypted")
plt.legend()
plt.title("theta")

plt.subplot(224)
plt.plot(sol.t, np.abs(uref[1, :] - OM), label="clear")
plt.plot(sol.t, np.abs(uref[1, :] - OMe), label="encrypted")
plt.legend()
plt.title("omega")

# errors over the last period
plt.figure(4)

plt.suptitle("Error in (x,y,theta,omega) over the last period", fontsize=14)

plt.subplot(221)
plt.plot(t_err, np.abs(tref_err[0, :] - y0_err), label="clear")
plt.plot(t_err, np.abs(tref_err[0, :] - y4_err), label="encrypted")
plt.title("x")

plt.subplot(222)
plt.plot(t_err, np.abs(tref_err[1, :] - y1_err), label="clear")
plt.plot(t_err, np.abs(tref_err[1, :] - y5_err), label="encrypted")
plt.title("y")

plt.subplot(223)
plt.plot(t_err, np.abs(tref_err[2, :] - y2_err), label="clear")
plt.plot(t_err, np.abs(tref_err[2, :] - y6_err), label="encrypted")
plt.title("theta")

plt.subplot(224)
plt.plot(t_err, np.abs(uref_err[1, :] - OM_err), label="clear")
plt.plot(t_err, np.abs(uref_err[1, :] - OMe_err), label="encrypted")
plt.title("omega")

plt.show()