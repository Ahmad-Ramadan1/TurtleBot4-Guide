import sympy as sp
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint, solve_ivp
from scipy.signal import place_poles

# Define initial conditions
initial_conditions = [0.5, 3.5, 0.5235, 1, 0, 0, 0, 0]  # [x0, y0, theta0, v0, x_hat0, x_dot_hat0, y_dot0, y_dot_hat0]
#initial_conditions = [0.5, 3.5, 0.5235, 1, 0, 0, 2, 0]  # [x0, y0, theta0, v0, x_hat0, x_dot_hat0, y_dot0, y_dot_hat0]

# Define inputs
def z_ref(t):
    z_r = np.array([np.sin(t), np.cos(t), -np.cos(t), np.sin(t)])

    return z_r

def u_ref(t):
    u_r = np.array([-np.sin(t), np.cos(t)])
    
    return u_r

# Define time span for integration
T = 15
t = np.linspace(0, T, 1000)  # Integration from t=0 to t=50 with 100 points


# Define the system matrices
A = np.array([[0, 1, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 1],
              [0, 0, 0, 0]])

B = np.array([[0, 0],
              [1, 0],
              [0, 0],
              [0, 1]])

C = np.array([[1, 0, 0, 0],
              [0, 0, 1, 0]])

At = A.transpose()
Ct = C.transpose()

# Define the desired poles
p = [-1, -3, -1, -3]
q = [-4, -6, -4, -6]

# Compute the controller gains using pole placement
K= place_poles(A, B, p).gain_matrix

Lt= place_poles(At, Ct, q).gain_matrix
L = Lt.transpose()


# Define the function representing the system of ODEs
def dynamic(t, Q):
    x, y, theta, v, x_hat, x_dot_hat, y_hat, y_dot_hat = Q
    dxdt = v * np.cos(theta)
    dydt = v * np.sin(theta)
    
    z = np.array([x, dxdt, y, dydt])
    z_hat = np.array([x_hat, x_dot_hat, y_hat, y_dot_hat])
    theta_hat = np.arctan2(y_dot_hat, x_dot_hat)
    
    z_r = z_ref(t)
    u_r = u_ref(t)
    control1, control2 = flatness(z_hat, z_r, u_r, v, theta_hat)
    dv = control1[0,0]
    w = control1[0,1]
    u_o = control2
    dthetadt = w
   
    # Update the state vector
    temp_1 = A.dot(z_hat)
    temp_2 = B.dot(u_o)
    temp_3 = L.dot(C).dot(z - z_hat)
    temp = temp_1 + temp_2 + temp_3
    dQdt = [dxdt, dydt, dthetadt, dv, temp[0], temp[1], temp[2], temp[3]]
    
    return dQdt

def flatness(z_hat, z_r, u_r, v, theta_hat):
    
    delta_z = z_hat - z_r

    # Calculate delta_u
    delta_u = np.dot(K, delta_z)
    # Define u
    u = u_r - delta_u

    # Define matrix M_inverse
    M_inverse = np.matrix([[v*np.cos(theta_hat), v*np.sin(theta_hat)],
                            [-np.sin(theta_hat), np.cos(theta_hat)]]) / v

    # Perform matrix multiplication
    result = np.dot(M_inverse, u)
    return result,u

# Solve the system of differential equations
#sol = odeint(dynamic, initial_conditions, t, tfirst=True)
sol = solve_ivp(dynamic, [0, T], initial_conditions , t_eval = t)
sol = np.transpose(sol.y)
# Extract results
x = sol[:, 0]
y = sol[:, 1]
theta = sol[:, 2]
x_hat = sol[:, 4]
y_hat = sol[:, 6]
theta_hat= np.arctan2(sol[:,7], sol[:,5])

# Plot x vs time
plt.figure(figsize=(10, 6))
plt.plot(t, x, label='x')
plt.plot(t, x_hat, label='x_hat')
plt.plot(t, z_ref(t)[0], label='x_ref')
plt.xlabel('Time')
plt.ylabel('value')
plt.title('Plot of u_ref, x, and x_hat over Time')
plt.grid(True)
plt.legend()
plt.show()

# Plot y vs time
plt.figure(figsize=(10, 6))
plt.plot(t, y, label='y')
plt.plot(t, y_hat, label='y_hat')
plt.plot(t, z_ref(t)[2], label='y_ref')
plt.xlabel('Time')
plt.ylabel('value')
plt.title('Plot of u_ref, y, and y_hat over Time')
plt.grid(True)
plt.legend()
plt.show()

# Plot theta vs time
plt.figure(figsize=(10, 6))
plt.plot(t, theta, label='theta')
plt.plot(t, theta_hat, label='theta_hat')
plt.plot(t, t, label='theta_ref')
plt.xlabel('Time')
plt.ylabel('theta')
plt.title('theta vs Time')
plt.grid(True)
plt.legend()
plt.show()


# Plot y vs x
plt.figure(figsize=(10, 6))
plt.plot(x, y, label='y vs x')
plt.xlabel('x')
plt.ylabel('y')
plt.title('y vs x')
plt.grid(True)
plt.legend()
plt.show()


# to have an observer only don't compute theta_hat and trace it
# to have the same graphs as the article i just changed in the function theta by theta_hat