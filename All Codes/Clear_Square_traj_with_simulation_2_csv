import rclpy
from turtlebot4_navigation.turtlebot4_navigator import TurtleBot4Directions, TurtleBot4Navigator
from rclpy.qos import QoSProfile, QoSReliabilityPolicy, QoSHistoryPolicy, QoSDurabilityPolicy
from geometry_msgs.msg import PoseStamped, Twist, PoseWithCovarianceStamped
from rclpy.node import Node
from nav_msgs.msg import Odometry
from scipy.signal import place_poles
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
import csv
import numpy as np
import time
import math


# Controller parameters
A = np.array([[0, 1, 0, 0],
              [0, 0, 0, 0],
              [0, 0, 0, 1],
              [0, 0, 0, 0]])

B = np.array([[0, 0],
              [1, 0],
              [0, 0],
              [0, 1]])

p = [-1.0, -1.5, -1.5, -1.0]  # Desired poles
K = place_poles(A, B, p).gain_matrix

# Extract K1 and K2
K1 = K[0, :]  # First row of K corresponds to the first control input
K2 = K[1, :]  # Second row of K corresponds to the second control input

# Reference control in the flat space 
Tf = 40

def u_ref(t): 
    return np.array([0, 0])


def z_ref(t): 
    t_ref = np.mod(t, Tf) 

    if t_ref <= 5:
        # Move from (-1, 0) to (-1, -1)
        x = -1
        y = -t_ref * (1 / 5)
        dxdt = 0
        dydt = -1 / 5
    elif t_ref <= 10:
        # Stop at (-1, -1)
        x = -1
        y = -1
        dxdt = 0
        dydt = 0
    elif t_ref <= 15:
        # Move from (-1, -1) to (-2, -1)
        x = -1 - (t_ref - 10) * (1 / 5)
        y = -1
        dxdt = -1 / 5
        dydt = 0
    elif t_ref <= 20:
        # Stop at (-2, -1)
        x = -2
        y = -1
        dxdt = 0
        dydt = 0
    elif t_ref <= 25:
        # Move from (-2, -1) to (-2, 0)
        x = -2
        y = -1 + (t_ref - 20) * (1 / 5)
        dxdt = 0
        dydt = 1 / 5
    elif t_ref <= 30:
        # Stop at (-2, 0)
        x = -2
        y = 0
        dxdt = 0
        dydt = 0
    elif t_ref <= 35:
        # Move from (-2, 0) to (-1, 0)
        x = -2 + (t_ref - 30) * (1 / 5)
        y = 0
        dxdt = 1 / 5
        dydt = 0
    elif t_ref <= 40:
        # Stop at (-1, 0)
        x = -1
        y = 0
        dxdt = 0
        dydt = 0

    return np.array([x, dxdt, y, dydt])

def traj_ref(t):
    t_ref = np.mod(t, Tf)
    
    # Initialize output variables
    x = 0.0
    y = 0.0
    theta = 0.0
    
    # Compute the trajectory values based on t_ref
    if t_ref <= 5:
        x = -1
        y = -t_ref * (1 / 5)
        theta = 0
    elif t_ref <= 10:
        x = -1
        y = -1
        theta = (t_ref - 5) * np.pi / 5
    elif t_ref <= 15:
        x = -1 - (t_ref - 10) * (1 / 5)
        y = -1
        theta = np.pi / 2
    elif t_ref <= 20:
        x = -2
        y = -1
        theta = np.pi / 2 + (t_ref - 15) * np.pi / 5
    elif t_ref <= 25:
        x = -2
        y = -1 + (t_ref - 20) * (1 / 5)
        theta = np.pi
    elif t_ref <= 30:
        x = -2
        y = 0
        theta = np.pi + (t_ref - 25) * np.pi / 5
    elif t_ref <= 35:
        x = -2 + (t_ref - 30) * (1 / 5)
        y = 0
        theta = 3 * np.pi / 2
    elif t_ref <= 40:
        x = -1
        y = 0
        theta = 3 * np.pi / 2 + (t_ref - 35) * np.pi / 5
        if theta >= 2 * np.pi:
            theta -= 2 * np.pi
            
    return np.array([x, y, theta])
    
# reference in the nonlinear space 
def v_om_ref(t):
    t_ref = np.mod(t, 10)  # This will be a scalar value
    if t_ref <= 5:
        v = 0.20
        omega = 0
    else:
        v = 0
        omega = np.pi/10

    return np.array([v, omega])
    

def theta_ref(t):
    # Define the duration of one full cycle
    cycle_duration = 10  # The duration of one full cycle in seconds
    
    # Calculate the time within the current cycle
    t_mod = np.mod(t, cycle_duration)
    
    # Determine the number of complete cycles
    t_floor = np.floor(t / cycle_duration)
    
    # Calculate the angle based on the current time in the cycle
    if t_mod < cycle_duration / 2:
        # First half of the cycle: linearly increasing angle from -π to 0
        theta = -np.pi + np.pi * t_mod / (cycle_duration / 2)
    else:
        # Second half of the cycle: linearly increasing angle from 0 to π
        theta = np.pi * (t_mod - cycle_duration / 2) / (cycle_duration / 2)

    # Ensure the angle is within the range [-π, π)
    theta = np.mod(theta + np.pi, 2 * np.pi) - np.pi

    return theta
    
def ctrlRotation(t, theta): 
    omega_r = float(v_om_ref(t)[1])
    gain = 0.4

    # Define the target angle for 90 degrees clockwise rotation
    theta_r = theta - np.pi / 2
    
    # Normalize the target angle to the range [0, 2 * np.pi)
    theta_r = theta_r % (2 * np.pi)

    # Compute the difference between current and target angles
    delta_theta = theta_r - theta
    
    # Normalize the angle difference to the range [-pi, pi]
    delta_theta = (delta_theta + np.pi) % (2 * np.pi) - np.pi
    
    # Compute the control signal
    control_signal = omega_r - gain * delta_theta

    return control_signal
    
def ctrlFlatness(t, z, zr, ur1, ur2, cosT, sinT, v): 
    ## Compute the trajectory error
    #  delta z = z - zr
    deltaT = z - zr

    ## Compute the feedback controls for the flat model
    #  -K @ deltaT + ur
    u_bf_1 = -K1 @ deltaT + ur1
    u_bf_2 = -K2 @ deltaT + ur2

    ## Retrieve the controls for the nonlinear model 
    # (vdot, omega) = M^{-1} (u1,u2)
    vdot  =   cosT * u_bf_1 + sinT * u_bf_2
    omega = (-sinT * u_bf_1 + cosT * u_bf_2) / v
    
    return vdot, omega
    
class MoveTurtleBot(Node):
    def __init__(self):
        super().__init__('move_turtlebot')
        self.publisher_ = self.create_publisher(Twist, '/cmd_vel', 10)
        
        self.start_time = time.time()
        self.duration = 157
        
        # Initialize arrays
        self.t_array = []
        self.x_array = []
        self.y_array = []
        self.theta_array = []
        self.v_array = []
        self.w_array = []
        self.last_non_zero_v_array = []
        
        self.t_array_s = []
        self.x_array_s = []
        self.y_array_s = []
        self.theta_array_s = []
        self.v_array_s = []
        self.w_array_s = []
        
        self.x_ref_array = []  # Add x_ref array
        self.x_dot_ref_array = [] 
        self.y_ref_array = []  # Add y_ref array
        self.y_dot_ref_array = [] 
        self.theta_ref_array = []  # Add theta_ref array
        self.theta_ref_csv_array = []
        self.v_ref_array = []  # Add v_ref array
        self.w_ref_array = []  # Add w_ref array
        
        self.x_ref_array_s = []  # Add x_ref array
        self.x_dot_ref_array_s = [] 
        self.y_ref_array_s = []  # Add y_ref array
        self.y_dot_ref_array_s = [] 
        self.theta_ref_array_s = []  # Add theta_ref array
        self.theta_ref_csv_array_s = []
        self.v_ref_array_s = []  # Add v_ref array
        self.w_ref_array_s = []  # Add w_ref array
        
        self.robot_x = 0.0
        self.robot_y = 0.0
        self.robot_theta = 0.0
        self.old_v = 0.31
        self.last_non_zero_v = 0.31
        
        self.robot_x_s = 0.0
        self.robot_y_s = 0.0
        self.robot_theta_s = 0.0
        self.old_v_s = 0.31

        self.start_plotting = False
        self.ctrlRotation_received = False
        
        self.QOS_amcl = QoSProfile(reliability=QoSReliabilityPolicy.RELIABLE,
                                   history=QoSHistoryPolicy.KEEP_LAST,
                                   depth=1)
       
        amcl_pose_sub = self.create_subscription(PoseWithCovarianceStamped, 'amcl_pose', self.amcl_callback, self.QOS_amcl)
        
        
        # Enable interactive mode for plotting
        plt.ion()
        self.fig, ((self.ax1, self.ax2, self.ax3), 
                   (self.ax4, self.ax5, self.ax6),
                   (self.ax7, self.ax8, self.ax9)) = plt.subplots(3, 3, figsize=(15, 15))
        
    def euler_from_quaternion(self, q):
        x, y, z, w = q.x, q.y, q.z, q.w
        t0 = +2.0 * (w * x + y * z)
        t1 = +1.0 - 2.0 * (x * x + y * y)
        roll_x = np.arctan2(t0, t1)
        t2 = +2.0 * (w * y - z * x)
        t2 = +1.0 if t2 > +1.0 else t2
        t2 = -1.0 if t2 < -1.0 else t2
        pitch_y = np.arcsin(t2)
      
        t3 = +2.0 * (w * z + x * y)
        t4 = +1.0 - 2.0 * (y * y + z * z)
        yaw_z = np.arctan2(t3, t4)
        return roll_x, pitch_y, yaw_z
        
    def publish_twist(self, linear_velocity, angular_velocity):
        msg = Twist()
        msg.linear.x = linear_velocity
        msg.angular.z = angular_velocity
        self.publisher_.publish(msg)
        self.get_logger().info(f'Moving With - linear velocity: {msg.linear.x}, angular velocity: {msg.angular.z}')
 
    def amcl_callback(self, msg):
        # Update robot's state from AMCL
        self.robot_x = msg.pose.pose.position.x
        self.robot_y = msg.pose.pose.position.y
        orientation = msg.pose.pose.orientation
        _, _, self.robot_theta = self.euler_from_quaternion(orientation)
        self.get_logger().info(f'AMCL data - x: {self.robot_x}, y: {self.robot_y}, theta: {self.robot_theta}')
        
        # Get current time
        current_time = time.time() - self.start_time

        # Define simulation parameters
        T = 0.047
        t = current_time
        t_mod = np.mod(t, 10)

        # Initialize state
        x = self.robot_x
        y = self.robot_y
        theta = self.robot_theta 
        
        if not self.ctrlRotation_received:
            v = self.old_v
        else:
            v = self.last_non_zero_v_array[-1]

        # Simulation loop based on real-time
        if t_mod <= 5:
            self.ctrlRotation_received = False  # Reset the flag
            z_bru = np.array([x, v * np.cos(theta), y, v * np.sin(theta)])

            # Test new reference 
            z_bru_r = z_ref(t)
            ddtref = u_ref(t)

            ur1 = ddtref[0]  # Brunovski reference control
            ur2 = ddtref[1]

            cosT = np.cos(theta)
            sinT = np.sin(theta)

            # Compute the value of the controls
            control = ctrlFlatness(t, z_bru, z_bru_r, ur1, ur2, cosT, sinT, v)
            
            dv = control[0]
            w = control[1]
            v_new = v + dv * T
            
            if v_new != 0:
                self.last_non_zero_v_array.append(v_new)

        else:
            # Use the reference control inputs if the error is small
            w = ctrlRotation(np.array([t]), theta)
            self.ctrlRotation_received = True
            v_new = 0.0000001
        
        max_linear_velocity = 0.31
        max_angular_velocity = 1.9
        
        # Limit linear velocity
        if v_new > max_linear_velocity:
            self.get_logger().warn(f'High Linear velocity detected: {v_new}. Warning: Limiting velocity to {max_linear_velocity}.')
        v_new = max(0, min(v_new, max_linear_velocity))

        # Limit angular velocity
        if abs(w) > max_angular_velocity:
            self.get_logger().warn(f'High angular velocity detected: {w}. Limiting to {np.sign(w) * max_angular_velocity}')
            w = np.sign(w) * max_angular_velocity

        # Update internal state
        self.old_v = v_new

        # Publish control command
        self.publish_twist(v_new, w)

        # Log the control loop information
        self.get_logger().info(f'Control loop: Time: {current_time:.2f}s - x: {self.robot_x:.2f}, y: {self.robot_y:.2f}, theta: {self.robot_theta:.2f}, v: {v_new:.2f}, w: {w:.2f}')
        
        if current_time > self.duration:
            self.get_logger().info('Control loop control finished.')
            raise SystemExit 
        
        tref = traj_ref(t)
        uref = v_om_ref(t)
        z_bru_r = z_ref(t)
        
        # Store data for later analysis
        self.t_array.append(current_time)
        self.x_array.append(self.robot_x)
        self.y_array.append(self.robot_y)
        self.theta_array.append(self.robot_theta)
        self.v_array.append(v_new)
        self.w_array.append(w)
        
        self.x_dot_ref_array.append(z_bru_r[1])  # Store x_dot_ref
        self.y_dot_ref_array.append(z_bru_r[3])  # Store y_dot_ref
        
        self.x_ref_array.append(tref[0])
        self.y_ref_array.append(tref[1])
        self.theta_ref_array.append(theta_ref(t))
        self.v_ref_array.append(uref[0])
        self.w_ref_array.append(uref[1])
     
    def save_to_csv(self, filename):
        headers = ['Time', 'X', 'Y', 'Theta', 'Linear Velocity', 'Angular Velocity', 'X_ref', 'Y_ref', 'Theta_ref', 'V_ref', 'W_ref', 'X_dot_ref', 'Y_dot_ref']
        rows = zip(self.t_array, self.x_array, self.y_array, self.theta_array, self.v_array, self.w_array, self.x_ref_array, self.y_ref_array, self.theta_ref_array, self.v_ref_array, self.w_ref_array, self.x_dot_ref_array, self.y_dot_ref_array)
        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            file.write('T = 0.047\n')
            file.write('duration = 157\n')
            file.write('duration_s = 60\n')
            file.write('p = [-1.0, -1.5, -1.5, -1.0]\n')
            writer.writerow(headers)
            writer.writerows(rows)
        
        self.get_logger().info(f'Data saved to {filename}')
        
    def save_to_csv_s(self, filename):
        headers = ['Time', 'X', 'Y', 'Theta', 'Linear Velocity', 'Angular Velocity', 'X_ref', 'Y_ref', 'Theta_ref', 'V_ref', 'W_ref', 'X_dot_ref', 'Y_dot_ref']
        rows = zip(self.t_array_s, self.x_array_s, self.y_array_s, self.theta_array_s, self.v_array_s, self.w_array_s, self.x_ref_array_s, self.y_ref_array_s, self.theta_ref_csv_array_s, self.v_ref_array_s, self.w_ref_array_s, self.x_dot_ref_array_s, self.y_dot_ref_array_s)

        with open(filename, 'w', newline='') as file:
            writer = csv.writer(file)
            file.write('T = 0.047\n')
            file.write('duration = 157\n')
            file.write('duration_s = 60\n')
            file.write('p = [-1.0, -1.5, -1.5, -1.0]\n')
            writer.writerow(headers)
            writer.writerows(rows)
        
        self.get_logger().info(f'Data saved to {filename}')
        
            
    def plot_all(self):
    
        plt.subplots_adjust(wspace=0.5, hspace=0.5, top=0.9, bottom=0.1, left=0.1, right=0.9)
        
        self.ax1.clear()
        self.ax1.plot(self.t_array, self.x_array, 'r--', label='X')
        self.ax1.plot(self.t_array, self.x_ref_array, 'r-', label='X_ref')
        self.ax1.set_xlabel('Time')
        self.ax1.set_ylabel('X position')
        self.ax1.set_title('X vs Time')
        self.ax1.legend()

        self.ax2.clear()
        self.ax2.plot(self.t_array, self.y_array, 'g--', label='Y')
        self.ax2.plot(self.t_array, self.y_ref_array, 'g-', label='Y_ref')
        self.ax2.set_xlabel('Time')
        self.ax2.set_ylabel('Y position')
        self.ax2.set_title('Y vs Time')
        self.ax2.legend()

        self.ax3.clear()
        self.ax3.plot(self.t_array, self.theta_array, 'b--', label='Theta')
        self.ax3.plot(self.t_array, self.theta_ref_array, 'b-', label='Theta_ref')
        self.ax3.set_xlabel('Time')
        self.ax3.set_ylabel('Theta position')
        self.ax3.set_title('Theta vs Time')
        self.ax3.legend()
        
        self.ax4.clear()
        self.ax4.plot(self.x_array, self.y_array, 'y--', label='Trajectory')
        self.ax4.plot(self.x_ref_array, self.y_ref_array, 'r-', label='Reference Trajectory')
        self.ax4.set_xlabel('X position')
        self.ax4.set_ylabel('Y position')
        self.ax4.set_title('X vs Y')
        self.ax4.legend()
        
        self.ax5.clear()
        self.ax5.plot(self.t_array, self.v_array, 'm--', label='Linear Velocity')
        self.ax5.plot(self.t_array, self.v_ref_array, 'm-', label='Reference Linear Velocity')
        self.ax5.set_xlabel('Time')
        self.ax5.set_ylabel('Linear Velocity')
        self.ax5.set_title('Linear Velocity vs Time')
        self.ax5.legend()
        
        self.ax6.clear()
        self.ax6.plot(self.t_array, self.w_array, 'k--', label='Angular Velocity')
        self.ax6.plot(self.t_array, self.w_ref_array, 'k-', label='Reference Angular Velocity')
        self.ax6.set_xlabel('Time')
        self.ax6.set_ylabel('Angular Velocity')
        self.ax6.set_title('Angular Velocity vs Time')
        self.ax6.legend()
        
        # Additional subplots for error plots
        self.ax7.clear()
        self.ax7.plot(self.t_array, np.abs(np.array(self.x_array) - np.array(self.x_ref_array)), 'r--', label='X Error')
        self.ax7.set_xlabel('Time')
        self.ax7.set_ylabel('X Error')
        self.ax7.set_title('X Error vs Time')
        self.ax7.legend()

        #self.ax8.clear()
        self.ax8.plot(self.t_array, np.abs(np.array(self.y_array) - np.array(self.y_ref_array)), 'g--', label='Y Error')
        self.ax8.set_xlabel('Time')
        self.ax8.set_ylabel('Y Error')
        self.ax8.set_title('Y Error vs Time')
        self.ax8.legend()
        
        #self.ax9.clear()
        self.ax9.plot(self.t_array, np.abs(np.array(self.theta_array) - np.array(self.theta_ref_array)), 'b--', label='Theta Error')
        self.ax9.set_xlabel('Time')
        self.ax9.set_ylabel('Theta Error')
        self.ax9.set_title('Theta Error vs Time')
        self.ax9.legend()
        
        start_time = 37
        end_time = 55

        # Adjust the x-axis limits to show only the specified time interval
        for ax in [self.ax7, self.ax8, self.ax9]:
            ax.set_xlim(start_time, end_time)

        self.fig.canvas.draw()
        self.fig.canvas.flush_events()
        
        # Save the figure
        plt.savefig('/home/turtlebotter/turtlebot4_ws/src/turtlebot4_python_tutorials/Figures/Clear_Square.png')

def main():
    rclpy.init()

    navigator = TurtleBot4Navigator()
    
    # Start on dock
    if not navigator.getDockedStatus():
        navigator.info('Docking before initializing pose')
        navigator.dock()
    
    # Set initial pose
    initial_pose = navigator.getPoseStamped([0.0, 0.0], TurtleBot4Directions.NORTH)
    navigator.setInitialPose(initial_pose)
    
    # Wait for Nav2 to be active
    navigator.waitUntilNav2Active()

    # Undock
    navigator.undock()
    
    # Create a node for moving the robot
    node = MoveTurtleBot()
    
    
    try:
        rclpy.spin(node)  # Ensure the node is properly initialized
        
    except SystemExit: 
        rclpy.logging.get_logger("Quitting").info('Done')
        #node.simulation(60)
        node.save_to_csv('/home/turtlebotter/turtlebot4_ws/src/turtlebot4_python_tutorials/Data/Clear_Square_robot_data.csv')
        #node.save_to_csv_s('/home/turtlebotter/turtlebot4_ws/src/turtlebot4_python_tutorials/Data/Clear_Square_robot_data_s.csv')
    finally:
         
        navigator.dock()
        node.plot_all()
        
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

